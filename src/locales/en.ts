import type { Translations } from '@/lib/i18n';

export const en: Translations = {
  common: {
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    remove: 'Remove',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
    loading: 'Loading',
    error: 'Error',
    success: 'Success',
    warning: 'Warning',
    info: 'Info',
    confirm: 'Confirm',
    yes: 'Yes',
    no: 'No',
    ok: 'OK',
    close: 'Close',
    open: 'Open',
    settings: 'Settings',
    search: 'Search',
    filter: 'Filter',
    sort: 'Sort',
    refresh: 'Refresh',
    copy: 'Copy',
    paste: 'Paste',
    cut: 'Cut',
    undo: 'Undo',
    redo: 'Redo',
    select: 'Select',
    selectAll: 'Select All',
    clear: 'Clear',
    reset: 'Reset',
    apply: 'Apply',
    submit: 'Submit',
    create: 'Create',
    update: 'Update',
    upload: 'Upload',
    download: 'Download',
    import: 'Import',
    export: 'Export',
    help: 'Help',
    about: 'About',
    version: 'Version',
    language: 'Language',
    theme: 'Theme',
    profile: 'Profile',
    account: 'Account',
    logout: 'Logout',
    login: 'Login',
    register: 'Register',
    forgotPassword: 'Forgot Password',
    changePassword: 'Change Password',
    email: 'Email',
    password: 'Password',
    username: 'Username',
    name: 'Name',
    firstName: 'First Name',
    lastName: 'Last Name',
    phone: 'Phone',
    address: 'Address',
    city: 'City',
    country: 'Country',
    zipCode: 'Zip Code',
    date: 'Date',
    time: 'Time',
    dateTime: 'Date & Time',
    today: 'Today',
    yesterday: 'Yesterday',
    tomorrow: 'Tomorrow',
    thisWeek: 'This Week',
    lastWeek: 'Last Week',
    nextWeek: 'Next Week',
    thisMonth: 'This Month',
    lastMonth: 'Last Month',
    nextMonth: 'Next Month',
    thisYear: 'This Year',
    lastYear: 'Last Year',
    nextYear: 'Next Year',
  },

  app: {
    title: 'Claudia',
    welcomeTitle: 'Welcome to Claudia',
    welcomeSubtitle: 'Your AI-powered development assistant',
    ccAgents: 'CC Agents',
    ccProjects: 'CC Projects',
    backToHome: 'Back to Home',
    newSession: 'New Session',
    usageDashboard: 'Usage Dashboard',
    mcp: 'MCP',
    claudeMd: 'CLAUDE.md',
  },

  // CLAUDE.md Editor
  claudemd: {
    title: 'CLAUDE.md',
    subtitle: 'Edit your Claude Code system prompt',
    editSystemPrompt: 'Edit your Claude Code system prompt',
    editProjectPrompt: 'Edit project-specific Claude Code system prompt',
    failedToLoad: 'Failed to load CLAUDE.md file',
    failedToSave: 'Failed to save CLAUDE.md file',
    savedSuccessfully: 'CLAUDE.md saved successfully',
    unsavedChanges: 'You have unsaved changes. Are you sure you want to leave?',
    memories: 'CLAUDE.md Memories',
    noFilesFound: 'No CLAUDE.md files found in this project',
    loadingFiles: 'Loading files...',
    failedToLoadFiles: 'Failed to load CLAUDE.md files',
  },

  projects: {
    title: 'CC Projects',
    subtitle: 'Browse your Claude Code sessions',
    noProjects: 'No projects found in ~/.claude/projects',
    projectName: 'Project Name',
    projectPath: 'Project Path',
    createdAt: 'Created At',
    sessions: 'Sessions',
    newClaudeCodeSession: 'New Claude Code session',
    runningClaudeSessions: 'Running Claude Sessions',
    hooks: 'Hooks',
    projectSettings: 'Project Settings',
  },

  sessions: {
    title: 'Sessions',
    noSessions: 'No sessions found',
    sessionName: 'Session Name',
    lastModified: 'Last Modified',
    messages: 'Messages',
    tokens: 'Tokens',
    cost: 'Cost',
    status: 'Status',
    active: 'Active',
    completed: 'Completed',
    failed: 'Failed',
    cancelled: 'Cancelled',
  },

  settings: {
    title: 'Settings',
    subtitle: 'Configure Claude Code preferences',
    saveSettings: 'Save Settings',
    saving: 'Saving...',
    settingsSaved: 'Settings saved successfully!',
    failedToSave: 'Failed to save settings',

    general: 'General',
    permissions: 'Permissions',
    environment: 'Environment',
    advanced: 'Advanced',
    hooks: 'Hooks',
    commands: 'Commands',
    storage: 'Storage',

    generalSettings: 'General Settings',
    includeCoAuthoredBy: 'Include "Co-authored by Claude"',
    includeCoAuthoredByDesc: 'Add Claude attribution to git commits and pull requests',
    verboseOutput: 'Verbose Output',
    verboseOutputDesc: 'Show full bash and command outputs',
    chatRetention: 'Chat Transcript Retention (days)',
    chatRetentionDesc: 'How long to retain chat transcripts locally (default: 30 days)',
    claudeInstallation: 'Claude Code Installation',
    claudeInstallationDesc: 'Select which Claude Code installation to use. Bundled version is recommended for best compatibility.',
    binaryPathChanged: '⚠️ Claude binary path has been changed. Remember to save your settings.',

    permissionRules: 'Permission Rules',
    permissionRulesDesc: 'Control which tools Claude Code can use without manual approval',
    allowRules: 'Allow Rules',
    denyRules: 'Deny Rules',
    addRule: 'Add Rule',
    noAllowRules: 'No allow rules configured. Claude will ask for approval for all tools.',
    noDenyRules: 'No deny rules configured.',
    permissionExamples: 'Examples:',

    environmentVariables: 'Environment Variables',
    environmentVariablesDesc: 'Environment variables applied to every Claude Code session',
    addVariable: 'Add Variable',
    noEnvironmentVariables: 'No environment variables configured.',
    commonVariables: 'Common variables:',

    advancedSettings: 'Advanced Settings',
    advancedSettingsDesc: 'Additional configuration options for advanced users',
    apiKeyHelper: 'API Key Helper Script',
    apiKeyHelperDesc: 'Custom script to generate auth values for API requests',
    rawSettings: 'Raw Settings (JSON)',
    rawSettingsDesc: 'This shows the raw JSON that will be saved to ~/.claude/settings.json',

    userHooks: 'User Hooks',
    userHooksDesc: 'Configure hooks that apply to all Claude Code sessions for your user account. These are stored in ~/.claude/settings.json',
  },

  claude: {
    claudeNotFound: 'Claude Code not found',
    claudeNotFoundDesc: 'Claude Code installation was not found on your system',
    selectClaudeInstallation: 'Select Claude Installation',
    installClaude: 'Install Claude Code',
    checking: 'Checking...',
    claudeCode: 'Claude Code',
    claudeVersion: 'Claude Code v{version}',
    claudeStreaming: 'Claude is streaming',
    claudeStreamingWarning: 'Claude is still responding. If you navigate away, Claude will continue running in the background.\n\nYou can return to this session from the Projects view.\n\nDo you want to continue?',
    continueNavigation: 'Continue Navigation',
  },

  messages: {
    failedToLoadProjects: 'Failed to load projects. Please ensure ~/.claude directory exists.',
    failedToLoadSessions: 'Failed to load sessions for this project.',
    ensureClaudeDirectory: 'Please ensure ~/.claude directory exists.',
    projectLoadError: 'Failed to load project',
    sessionLoadError: 'Failed to load session',
    saveSuccess: 'Saved successfully',
    saveError: 'Failed to save',
    deleteSuccess: 'Deleted successfully',
    deleteError: 'Failed to delete',
    copySuccess: 'Copied to clipboard',
    copyError: 'Failed to copy',
    uploadSuccess: 'Uploaded successfully',
    uploadError: 'Failed to upload',
    downloadSuccess: 'Downloaded successfully',
    downloadError: 'Failed to download',
    networkError: 'Network error',
    serverError: 'Server error',
    validationError: 'Validation error',
    permissionError: 'Permission denied',
    notFoundError: 'Not found',
    timeoutError: 'Request timeout',
    unknownError: 'Unknown error',
  },

  validation: {
    required: 'This field is required',
    invalidEmail: 'Invalid email address',
    invalidUrl: 'Invalid URL',
    invalidNumber: 'Invalid number',
    minLength: 'Minimum length is {min} characters',
    maxLength: 'Maximum length is {max} characters',
    passwordMismatch: 'Passwords do not match',
    invalidFormat: 'Invalid format',
    fileTooBig: 'File is too big',
    invalidFileType: 'Invalid file type',
  },

  time: {
    justNow: 'Just now',
    minutesAgo: '{count} minutes ago',
    hoursAgo: '{count} hours ago',
    daysAgo: '{count} days ago',
    weeksAgo: '{count} weeks ago',
    monthsAgo: '{count} months ago',
    yearsAgo: '{count} years ago',
    inMinutes: 'In {count} minutes',
    inHours: 'In {count} hours',
    inDays: 'In {count} days',
    inWeeks: 'In {count} weeks',
    inMonths: 'In {count} months',
    inYears: 'In {count} years',
  },

  mcp: {
    title: 'MCP Manager',
    subtitle: 'Manage Model Context Protocol servers',
    servers: 'Servers',
    addServer: 'Add Server',
    serverName: 'Server Name',
    serverCommand: 'Command',
    serverArgs: 'Arguments',
    serverEnv: 'Environment',
    enabled: 'Enabled',
    disabled: 'Disabled',
    autoApprove: 'Auto Approve',
    importExport: 'Import/Export',
    importConfig: 'Import Config',
    exportConfig: 'Export Config',
    noServers: 'No MCP servers configured',
    serverStatus: 'Server Status',
    connected: 'Connected',
    disconnected: 'Disconnected',
    connecting: 'Connecting',
    error: 'Error',
    // Additional MCP translations
    mcpServers: 'MCP Servers',
    manageServers: 'Manage Servers',
    serverConfiguration: 'Server Configuration',
    addNewServer: 'Add New Server',
    editServer: 'Edit Server',
    removeServer: 'Remove Server',
    serverDetails: 'Server Details',
    connectionStatus: 'Connection Status',
    serverLogs: 'Server Logs',
    testConnection: 'Test Connection',
    reconnect: 'Reconnect',
    disconnect: 'Disconnect',
    serverPort: 'Server Port',
    serverHost: 'Server Host',
    authToken: 'Auth Token',
    timeout: 'Timeout',
    retryAttempts: 'Retry Attempts',
    enableLogging: 'Enable Logging',
    logLevel: 'Log Level',
    serverType: 'Server Type',
    protocol: 'Protocol',
    version: 'Version',
    capabilities: 'Capabilities',
    tools: 'Tools',
    resources: 'Resources',
    prompts: 'Prompts',
    sampling: 'Sampling',
    roots: 'Roots',
    experimental: 'Experimental',
    serverInfo: 'Server Info',
    lastSeen: 'Last Seen',
    uptime: 'Uptime',
    requestCount: 'Request Count',
    errorCount: 'Error Count',
    averageResponseTime: 'Average Response Time',
  },

  usage: {
    title: 'Usage Dashboard',
    subtitle: 'Monitor your Claude Code usage and costs',
    totalTokens: 'Total Tokens',
    totalCost: 'Total Cost',
    sessionsCount: 'Sessions',
    averageCost: 'Average Cost',
    dailyUsage: 'Daily Usage',
    weeklyUsage: 'Weekly Usage',
    monthlyUsage: 'Monthly Usage',
    yearlyUsage: 'Yearly Usage',
    topProjects: 'Top Projects',
    recentActivity: 'Recent Activity',
    costBreakdown: 'Cost Breakdown',
    tokenBreakdown: 'Token Breakdown',
    noData: 'No usage data available',
    refreshData: 'Refresh Data',
  },

  agents: {
    title: 'CC Agents',
    subtitle: 'Manage your Claude Code agents',
    createAgent: 'Create Agent',
    agentName: 'Agent Name',
    agentDescription: 'Description',
    agentPrompt: 'Prompt',
    agentIcon: 'Icon',
    agentSettings: 'Settings',
    runAgent: 'Run Agent',
    editAgent: 'Edit Agent',
    deleteAgent: 'Delete Agent',
    duplicateAgent: 'Duplicate Agent',
    shareAgent: 'Share Agent',
    importAgent: 'Import Agent',
    exportAgent: 'Export Agent',
    noAgents: 'No agents found',
    agentExecution: 'Agent Execution',
    executionHistory: 'Execution History',
    executionStatus: 'Status',
    executionOutput: 'Output',
    executionError: 'Error',
    executionSuccess: 'Success',
    executionCancelled: 'Cancelled',
    executionRunning: 'Running',
    executionPending: 'Pending',
    // Create Agent interface translations
    editCCAgent: 'Edit CC Agent',
    createCCAgent: 'Create CC Agent',
    updateAgent: 'Update your Claude Code agent',
    createNewAgent: 'Create a new Claude Code agent',
    basicInformation: 'Basic Information',
    model: 'Model',
    claude4Sonnet: 'Claude 4 Sonnet',
    claude4Opus: 'Claude 4 Opus',
    fasterEfficient: 'Faster, efficient for most tasks',
    moreCapable: 'More capable, better for complex tasks',
    defaultTask: 'Default Task (Optional)',
    defaultTaskPlaceholder: 'e.g., Review this code for security issues',
    defaultTaskDesc: 'This will be used as the default task placeholder when executing the agent',
    systemPrompt: 'System Prompt',
    systemPromptDesc: 'Define the behavior and capabilities of your CC Agent',
    agentNamePlaceholder: 'e.g., Code Assistant',
    unsavedChanges: 'You have unsaved changes. Are you sure you want to leave?',
    agentNameRequired: 'Agent name is required',
    systemPromptRequired: 'System prompt is required',
    failedToCreateAgent: 'Failed to create agent',
    failedToUpdateAgent: 'Failed to update agent',
    saving: 'Saving...',
  },

  // Hooks Editor translations
  hooks: {
    title: 'Hooks Configuration',
    subtitle: 'Configure shell commands to execute at various points in Claude Code\'s lifecycle',
    scope: 'Scope',
    projectScope: 'Project Scope',
    localScope: 'Local Scope',
    userScope: 'User Scope',
    localScopeDesc: 'These settings are not committed to version control',
    unsavedChanges: 'You have unsaved changes. Click Save to persist them.',
    validationErrors: 'Validation Errors:',
    securityWarnings: 'Security Warnings:',
    templates: 'Templates',
    preToolUse: 'Pre Tool Use',
    postToolUse: 'Post Tool Use',
    notification: 'Notification',
    stop: 'Stop',
    subagentStop: 'Subagent Stop',
    preToolUseDesc: 'Runs before tool calls, can block and provide feedback',
    postToolUseDesc: 'Runs after successful tool completion',
    notificationDesc: 'Customizes notifications when Claude needs attention',
    stopDesc: 'Runs when Claude finishes responding',
    subagentStopDesc: 'Runs when a Claude subagent (Task) finishes',
    pattern: 'Pattern',
    patternPlaceholder: 'e.g., Bash, Edit|Write, mcp__.*',
    patternTooltip: 'Tool name pattern (regex supported). Leave empty to match all tools.',
    commonPatterns: 'Common patterns',
    custom: 'Custom',
    commands: 'Commands',
    addCommand: 'Add Command',
    noCommandsAdded: 'No commands added yet',
    commandPlaceholder: 'Enter shell command...',
    seconds: 'seconds',
    noHooksConfigured: 'No hooks configured for this event',
    addHook: 'Add Hook',
    addMatcher: 'Add Matcher',
    removeMatcher: 'Remove Matcher',
    removeCommand: 'Remove Command',
    loadingHooks: 'Loading hooks configuration...',
    savingHooks: 'Saving...',
    hooksConfiguration: 'Hooks Configuration',
  },

  // Slash Commands Manager translations
  commands: {
    title: 'Slash Commands',
    subtitle: 'Create custom commands to streamline your workflow',
    projectCommands: 'Project Slash Commands',
    projectCommandsDesc: 'Create custom commands for this project',
    newCommand: 'New Command',
    searchCommands: 'Search commands...',
    allCommands: 'All Commands',
    project: 'Project',
    user: 'User',
    noCommandsFound: 'No commands found',
    noProjectCommands: 'No project commands created yet',
    noCommandsCreated: 'No commands created yet',
    createFirstProjectCommand: 'Create your first project command',
    createFirstCommand: 'Create your first command',
    editCommand: 'Edit Command',
    createNewCommand: 'Create New Command',
    commandName: 'Command Name',
    commandNamePlaceholder: 'e.g., review, fix-issue',
    namespace: 'Namespace (Optional)',
    namespacePlaceholder: 'e.g., frontend, backend',
    description: 'Description (Optional)',
    descriptionPlaceholder: 'Brief description of what this command does',
    commandContent: 'Command Content',
    contentPlaceholder: 'Enter the prompt content. Use $ARGUMENTS for dynamic values.',
    contentDesc: 'Use $ARGUMENTS for user input, @filename for files, and !`command` for bash commands',
    allowedTools: 'Allowed Tools',
    allowedToolsDesc: 'Select which tools Claude can use with this command',
    examples: 'Examples',
    preview: 'Preview',
    arguments: 'Arguments',
    deleteCommand: 'Delete Command',
    deleteCommandConfirm: 'Are you sure you want to delete this command?',
    deleteCommandDesc: 'This action cannot be undone. The command file will be permanently deleted.',
    deleting: 'Deleting...',
    scope: 'Scope',
    userGlobal: 'User (Global)',
    availableAcrossProjects: 'Available across all projects',
    onlyAvailableInProject: 'Only available in this project',
    userCommands: 'User Commands',
    tools: 'tools',
    bash: 'Bash',
    files: 'Files',
    showContent: 'Show content',
    hideContent: 'Hide content',
  },

  // NFO interface translations
  nfo: {
    title: 'CLAUDIA.NFO',
    credits: 'CREDITS',
    poweredBy: 'POWERED BY',
    runtime: 'RUNTIME',
    uiFramework: 'UI FRAMEWORK',
    styling: 'STYLING',
    animations: 'ANIMATIONS',
    buildTool: 'BUILD TOOL',
    packageManager: 'PACKAGE MANAGER',
    specialThanks: 'SPECIAL THANKS',
    openSourceCommunity: 'To the open source community',
    betaTesters: 'To all the beta testers',
    believers: 'To everyone who believed in this project',
    sharing: 'Remember: Sharing is caring!',
    support: 'Support the developers!',
    fileABug: 'File a bug',
    strategicProject: 'A strategic project by Asterisk',
    dependencies: 'DEPENDENCIES',
  },

  // Storage interface translations
  storage: {
    title: 'Storage Management',
    subtitle: 'Manage Claude Code data and cache',
    totalSize: 'Total Size',
    projects: 'Projects',
    sessions: 'Sessions',
    cache: 'Cache',
    logs: 'Logs',
    settings: 'Settings',
    cleanup: 'Cleanup',
    cleanupDesc: 'Delete old session data and cache files',
    cleanupOlderThan: 'Cleanup older than',
    days: 'days',
    cleanupNow: 'Cleanup Now',
    cleanupSuccess: 'Cleanup successful',
    cleanupError: 'Cleanup failed',
    calculating: 'Calculating...',
    noData: 'No data',
    storageLocation: 'Storage Location',
    openInFinder: 'Open in File Manager',
    exportData: 'Export Data',
    importData: 'Import Data',
    backupData: 'Backup Data',
    restoreData: 'Restore Data',
    dataIntegrity: 'Data Integrity',
    checkIntegrity: 'Check Integrity',
    repairData: 'Repair Data',
    integrityCheck: 'Integrity Check',
    integrityOk: 'Data integrity is good',
    integrityIssues: 'Data integrity issues found',
    autoCleanup: 'Auto Cleanup',
    autoCleanupDesc: 'Automatically delete old data older than specified days',
    enableAutoCleanup: 'Enable Auto Cleanup',
    cleanupInterval: 'Cleanup Interval',
  },
};